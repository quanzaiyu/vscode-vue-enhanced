/*
  参考：
- https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets
- https://marketplace.visualstudio.com/items?itemName=Wscats.vue
- https://marketplace.visualstudio.com/items?itemName=heberalmeida.vue-snippets-js-html-pug-razor
- https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets
- https://vuejs.github.io/vetur/snippet.html
*/

{
  // 生命周期
  "beforeCreate": {
    "prefix": "beforeCreate",
    "body": [
      "beforeCreate() {\n\t$0\n},"
    ],
    "description": "Called synchronously after the instance has just been initialized, before data observation and event/watcher setup."
  },
  "created": {
    "prefix": "created",
    "body": [
      "created() {\n\t$0\n},"
    ],
    "description": "Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the $el property will not be available yet"
  },
  "beforeMount": {
    "prefix": "beforeMount",
    "body": [
      "beforeMount() {\n\t$0\n},"
    ],
    "description": "Called right before the mounting begins: the render function is about to be called for the first time."
  },
  "mounted": {
    "prefix": "mounted",
    "body": [
      "mounted() {\n\t$0\n},"
    ],
    "description": "Called after the instance has just been mounted where el is replaced by the newly created vm.$el. If the root instance is mounted to an in-document element, vm.$el will also be in-document when mounted is called."
  },
  "beforeUpdate": {
    "prefix": "beforeUpdate",
    "body": [
      "beforeUpdate() {\n\t$0\n},"
    ],
    "description": "Called when the data changes, before the virtual DOM is re-rendered and patched.(This hook is not called during server-side rendering.)"
  },
  "updated": {
    "prefix": "updated",
    "body": [
      "updated() {\n\t$0\n},"
    ],
    "description": "Called after a data change causes the virtual DOM to be re-rendered and patched.(This hook is not called during server-side rendering.)"
  },
  "activated": {
    "prefix": "activated",
    "body": [
      "activated() {\n\t$0\n},"
    ],
    "description": "Called when a kept-alive component is activated.(This hook is not called during server-side rendering.)"
  },
  "deactivated": {
    "prefix": "deactivated",
    "body": [
      "deactivated() {\n\t$0\n},"
    ],
    "description": "Called when a kept-alive component is deactivated.(This hook is not called during server-side rendering.)"
  },
  "beforeDestroy": {
    "prefix": "beforeDestroy",
    "body": [
      "beforeDestroy() {\n\t$0\n},"
    ],
    "description": "Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.(This hook is not called during server-side rendering.)"
  },
  "destroyed": {
    "prefix": "destroyed",
    "body": [
      "destroyed() {\n\t$0\n},"
    ],
    "description": "Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.(This hook is not called during server-side rendering.)"
  },

  // 常用属性
  "data": {
    "prefix": "data",
    "body": [
      "data() {\n\treturn {\n\t\t$0\n\t}\n},"
    ],
    "description": "The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. The object must be plain: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior."
  },
  "computed": {
    "prefix": "computed",
    "body": [
      "computed: {\n\t$0\n},"
    ],
    "description": "Computed properties to be mixed into the Vue instance. All getters and setters have their this context automatically bound to the Vue instance."
  },
  "methods": {
    "prefix": "methods",
    "body": [
      "methods: {\n\t$0\n},"
    ],
    "description": "Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their this context automatically bound to the Vue instance"
  },
  "watch": {
    "prefix": "watch",
    "body": [
      "watch: {\n\t$0\n},"
    ],
    "description": "An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call $watch() for each entry in the object at instantiation"
  },
  "watch:attr": {
    "prefix": "watch:options",
    "body": [
      "${1:data}: {",
      "\timmediate: ${2:true},",
      "\tdeep: ${3:true},",
      "\thandler(${4:newValue}, ${5:oldValue}) {",
      "\t\t${0}",
      "\t}",
      "}"
    ],
    "description": "vue watcher with options"
  },
  "props": {
      "prefix": "props",
      "body": [
          "props: [$0],"
      ],
      "description": "A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values"
  },
  "props:obj": {
    "prefix": "props:obj",
    "body": [
      "props: {$0},"
    ],
    "description": "Vue Props with Object"
  },
  "Vue Props with Default": {
    "prefix": "props:item",
    "body": [
      "${1:propName}: {",
      "\ttype: ${2:Number},",
      "\tdefault: ${0}",
      "},"
    ],
    "description": "Vue Props item"
  },
  "filters": {
    "prefix": "filters",
    "body": [
      "filters: {\n\t$0\n},"
    ],
    "description": "A hash of filters to be made available to the Vue instance."
  },
  "filters:element": {
    "prefix": "filters:element",
    "body": [
      "${1:fnName}: function(${2:value}) {",
      "\treturn ${2:value}${0}",
      "}"
    ],
    "description": "filters element"
  },
  "directives": {
    "prefix": "directives",
    "body": [
      "directives: {\n\t$0\n}"
    ],
    "description": "A hash of directives to be made available to the Vue instance."
  },
  "components": {
    "prefix": "components",
    "body": [
      "components: {\n\t$0\n}"
    ],
    "description": "A hash of components to be made available to the Vue instance."
  },
  "mixins": {
    "prefix": "mixins",
    "body": [
      "mixins: [$0]"
    ],
    "description": "The mixins option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in Vue.extend()."
  },
  "render": {
    "prefix": "render",
    "body": [
      "render: function (${createElement}, ${context}) {\n\t$0\n}"
    ],
    "description": "An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a createElement method as it’s first argument used to create VNodes."
  },
  "mixin": {
    "prefix": "mixin",
    "body": [
      "const ${1:mixinName} = {",
      "\tmounted() {",
      "\t\tconsole.log('hello from mixin!');",
      "\t},",
      "};"
    ],
    "description": "mixin"
  },

  // Vue静态方法
  "extend": {
    "prefix": "Vue.extend",
    "body": [
      "Vue.extend({\n\ttemplate: ${template}\n})"
    ],
    "description": "Create a “subclass” of the base Vue constructor. The argument should be an object containing component options."
  },
  "nextTick": {
    "prefix": "Vue.nextTick",
    "body": [
      "Vue.nextTick({\n\t$1\n})"
    ],
    "description": "Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update."
  },
  "set": {
    "prefix": "Vue.set",
    "body": [
      "Vue.set(${object}, ${key}, ${value})"
    ],
    "description": "Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions."
  },
  "delete": {
    "prefix": "Vue.delete",
    "body": [
      "Vue.delete(${object}, ${key})"
    ],
    "description": "Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it."
  },
  "directive": {
    "prefix": "Vue.directive",
    "body": [
      "Vue.directive(${id}, ${definition})"
    ],
    "description": "Register or retrieve a global directive."
  },
  "filter": {
    "prefix": "Vue.filter",
    "body": [
      "Vue.filter(${id}, ${definition})"
    ],
    "description": "Register or retrieve a global filter"
  },
  "component": {
    "prefix": "Vue.component",
    "body": [
      "Vue.component(${id}, ${definition})"
    ],
    "description": "Register or retrieve a global component. Registration also automatically sets the component’s name with the given id"
  },
  "use": {
    "prefix": "Vue.use",
    "body": [
      "Vue.use(${plugin})"
    ],
    "description": "Install a Vue.js plugin. If the plugin is an Object, it must expose an install method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument"
  },
  "Vue.mixin": {
    "prefix": "Vue.mixin",
    "body": [
      "Vue.mixin(${mixin})"
    ],
    "description": "Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. Not recommended in application code"
  },
  "compile": {
    "prefix": "Vue.compile",
    "body": [
      "Vue.compile(${template})"
    ],
    "description": "Compiles a template string into a render function. Only available in the standalone build."
  },

  // 组件导入导出
  "Vue Import File": {
    "prefix": "vue:component-import",
    "body": ["import ${1:New} from '@/components/${1:New}.vue'"],
    "description": "Import one component into another"
  },

  // vue router
  "VueRouter:create": {
    "prefix": "VueRouter:create",
    "body": [
      "import Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n\nexport default new Router({\n\tmode: '${history}',\n\tbase: ${__dirname},\n\troutes: [$0]\n})"
    ],
    "description": "[router]VueRouter master file template"
  },
  "VueRouter:path": {
    "prefix": "VueRouter:path",
    "body": [
      "{ path: '$1', name: '$2', component: ${3:component} }"
    ],
    "description": "[router]Basic Routes"
  },
  "VueRouter:path-async": {
    "prefix": "VueRouter:path-async",
    "body": [
      "{ path: '$1', name: '$2', component: resolve => require(['$3'], resolve) }"
    ],
    "description": "[router] Async Component Routes"
  },
  "VueRouter:children": {
    "prefix": "VueRouter:path-children",
    "body": [
      "{ path: '$1', name: '$2', component: ${3:component},\n\tchildren: [\n\t\t$4\n\t]\n}"
    ],
    "description": "[router]Nested Routes"
  },
  "VueRouter:scrollBehavior": {
    "prefix": "VueRouter:scrollBehavior",
    "body": [
      "scrollBehavior (to, from, savedPosition){\n\t${//return desired position}\n\t$0\n}"
    ],
    "description": "[router]Scroll Behavior(this feature only works in HTML5 history mode)"
  },
  "VueRouter:alias": {
    "prefix": "VueRouter:alias",
    "body": [
      "alias: $0"
    ],
    "description": "[router]alias"
  },
  "VueRouter:redirect": {
    "prefix": "VueRouter:redirect",
    "body": [
      "redirect: $0"
    ],
    "description": "[router]redirect"
  },
  "VueRouter:meta": {
    "prefix": "VueRouter:meta",
    "body": [
      "meta: { ${options} }"
    ],
    "description": "[router]Route Meta Fields"
  },

  // vuex
  "Vue MapState": {
    "prefix": "mapState",
    "body": [
      "import { mapState } from 'vuex'",
      "",
      "export default {",
      "\tcomputed: {",
      "\t\t...mapState([",
      "\t\t\t${1:'nameOfState'},",
      "\t\t])",
      "\t},",
      "};"
    ],
    "description": "mapState inside a vue component"
  },
  "Vue MapGetters": {
    "prefix": "mapGetters",
    "body": [
      "import { mapGetters } from 'vuex'",
      "",
      "export default {",
      "\tcomputed: {",
      "\t\t...mapGetters([",
      "\t\t\t${1:'nameOfGetter'},",
      "\t\t])",
      "\t},",
      "};"
    ],
    "description": "mapGetters inside a vue component"
  },
  "Vue MapMutations": {
    "prefix": "mapMutations",
    "body": [
      "import { mapMutations } from 'vuex'",
      "",
      "export default {",
      "\tmethods: {",
      "\t\t...mapMutations([",
      "\t\t\t${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` ",
      "\t\t])",
      "\t},",
      "};"
    ],
    "description": "mapMutations inside a vue component"
  },
  "Vue MapActions": {
    "prefix": "mapActions",
    "body": [
      "import { mapActions } from 'vuex';",
      "",
      "export default {",
      "\tmethods: {",
      "\t\t...mapActions([",
      "\t\t\t${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` ",
      "\t\t])",
      "\t},",
      "};"
    ],
    "description": "mapActions inside a vue component"
  },
  "Vue Commit Vuex Store in Methods": {
    "prefix": "commit",
    "body": [
      "${1:mutationName}() {",
      "\tthis.\\$store.commit('${1:mutationName}', ${2:payload})",
      "}"
    ],
    "description": "commit to vuex store in methods for mutation"
  },
  "Vue Dispatch Vuex Store in Methods": {
    "prefix": "dispatch",
    "body": [
      "${1:actionName}() {",
      "\tthis.\\$store.dispatch('${1:actionName}', ${2:payload})",
      "}"
    ],
    "description": "dispatch to vuex store in methods for action"
  },

  // 其他
  "Vue Custom Directive": {
    "prefix": "vue:directive",
    "body": [
      "Vue.directive('${1:directiveName}', {",
      "\tbind(el, binding, vnode) {",
      "\t\tel.style.${2:arg} = binding.value.${2:arg};",
      "\t}",
      "});"
    ],
    "description": "vue custom directive"
  },
  "Vue Transition Methods with JavaScript Hooks": {
    "prefix": "vue:anim",
    "body": [
      "beforeEnter(el) {",
      "\tconsole.log('beforeEnter');",
      "},",
      "enter(el, done) {",
      "\tconsole.log('enter');",
      "\tdone();",
      "},",
      "beforeLeave(el) {",
      "\tconsole.log('beforeLeave');",
      "},",
      "leave(el, done) {",
      "\tconsole.log('leave');",
      "\tdone();",
      "},"
    ],
    "description": "transition component js hooks"
  },
  "Unit Test": {
    "prefix": "vue:test",
    "body": [
      "import Vue from 'vue';",
      "import ${1:HelloWorld} from './components/${1:HelloWorld}';",
      "",
      "describe('${1:HelloWorld}.vue', () => {",
      "\tit('${2:should render correct contents}', () => {",
      "\t\tconst Constructor = Vue.extend(${1:HelloWorld});",
      "\t\tconst vm = new Constructor().$mount();",
      "\t\texpect(vm.$el.querySelector('.hello h1').textContent)",
      "\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'});",
      "\t});",
      "});"
    ],
    "description": "unit test component"
  },
}
